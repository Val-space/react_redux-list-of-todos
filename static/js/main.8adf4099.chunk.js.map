{"version":3,"sources":["store/index.ts","asyncActions/todos.js","components/TodoList/TodoList.tsx","components/User/User.tsx","App.tsx","index.tsx"],"names":["ADD_TODOS","ADD_USER","CLEAR_USER","DELETE_TODO","HANDLE_CHECKED","addUser","payload","type","getTodos","state","todos","getUser","user","initialState","loading","message","store","createStore","action","filter","todo","id","map","completed","composeWithDevTools","applyMiddleware","thunk","fetchTodos","dispatch","fetch","then","response","json","TodoContainer","styled","div","TodoRow","TodoList","useSelector","currentUser","useDispatch","useState","status","setStatus","query","setQuery","displayedTodoList","title","toLowerCase","includes","filterByStatus","className","placeholder","onChange","e","target","value","name","length","classNames","userId","onClick","catch","htmlFor","defaultChecked","style","flexBasis","UserWrap","UserContainer","User","email","phone","AppWrapper","App","useEffect","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8adf4099.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n// Action types - is just a constant. MUST have a unique value.\nconst ADD_TODOS = 'ADD_TODOS';\nconst ADD_USER = 'ADD_USER';\nconst CLEAR_USER = 'CLEAR_USER';\nconst DELETE_TODO = 'DELETE_TODO';\nconst HANDLE_CHECKED = 'HANDLE_CHECKED';\n\n// Action creators - a function returning an action object\nexport const addTodos = (payload: Todo[]) => ({ type: ADD_TODOS, payload });\nexport const addUser = (payload: User) => ({ type: ADD_USER, payload });\nexport const clearUser = () => ({ type: CLEAR_USER });\nexport const deleteTodo = (payload: number) => ({ type: DELETE_TODO, payload });\nexport const handleChecked = (payload: number) => ({ type: HANDLE_CHECKED, payload });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getTodos = (state: RootState) => state.todos;\nexport const getUser = (state: RootState) => state.user;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  message: string;\n  todos: Todo[] | [],\n  user: User | null,\n};\n\nconst initialState: RootState = {\n  loading: false,\n  message: '',\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_TODOS:\n      return { ...state, todos: [...action.payload] };\n\n    case ADD_USER:\n      return { ...state, user: action.payload };\n\n    case CLEAR_USER:\n      return { ...state, user: null };\n\n    case DELETE_TODO:\n      return { ...state, todos: state.todos.filter(todo => todo.id !== action.payload) };\n\n    case HANDLE_CHECKED:\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id === action.payload) {\n            return { ...todo, completed: !todo.completed };\n          }\n\n          return todo;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import { addTodos, addUser } from '../store';\n\nexport const fetchTodos = () => {\n  // eslint-disable-next-line\n  return function (dispatch) {\n    fetch('https://mate.academy/students-api/todos')\n      .then(response => response.json())\n      .then(json => dispatch(addTodos(json)));\n  };\n};\n\nexport const fetchUser = (userId) => {\n  // eslint-disable-next-line\n  return function (dispatch) {\n    fetch(`https://mate.academy/students-api/users/${userId}`)\n      .then(response => response.json())\n      .then(json => dispatch(addUser(json)))\n      .catch(() => dispatch(addUser(null)));\n  };\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport {\n  getTodos,\n  getUser,\n  deleteTodo,\n  handleChecked,\n} from '../../store/index';\nimport { fetchUser } from '../../asyncActions/todos';\n\nconst TodoContainer = styled.div`\nflex-basis: 60%;\nmargin:10px;\nbackground-color: white;\npadding: 10px;\nborder-radius: 10px;\n`;\n\nconst TodoRow = styled.div`\ndisplay: flex;\ngap:20px;\npadding:10px;\nmargin-bottom:10px;\njustify-content: space-between;\nalign-items: center;\n`;\n\nconst TodoList = () => {\n  const todos = useSelector(getTodos);\n  const currentUser = useSelector(getUser);\n  const dispatch = useDispatch();\n  const [status, setStatus] = useState('All');\n  const [query, setQuery] = useState('');\n\n  const todosToDisplay = () => {\n    const filterByStatus = (todo: Todo) => {\n      switch (status) {\n        case 'completed':\n          return todo.completed;\n        case 'notCompleted':\n          return !todo.completed;\n        default:\n          return true;\n      }\n    };\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n      && filterByStatus(todo)));\n  };\n\n  const displayedTodoList = todosToDisplay();\n\n  return (\n    <TodoContainer>\n      <input\n        className=\"input is-normal mb-2\"\n        type=\"text\"\n        placeholder=\"Search for todo\"\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <div className=\"select mb-2\">\n        <select\n          name=\"status\"\n          // defaultValue={status}\n          onChange={(e) => setStatus(e.target.value)}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"notCompleted\">Still in process</option>\n        </select>\n\n      </div>\n      {todos.length > 0 && displayedTodoList.map((todo: Todo) => (\n        <TodoRow key={todo.id}>\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-dark', 'is-outlined',\n              { 'is-focused': currentUser && todo.userId === currentUser.id })}\n            onClick={() => dispatch(fetchUser(todo.userId))}\n          >\n            {`User: ${todo.userId}`}\n          </button>\n          <label htmlFor=\"status\">\n            <input\n              defaultChecked={todo.completed}\n              onChange={() => dispatch(handleChecked(todo.id))}\n              type=\"checkbox\"\n              id=\"status\"\n            />\n          </label>\n          <p style={{ flexBasis: '70%' }}>{todo.title}</p>\n          <button\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => dispatch(deleteTodo(todo.id))}\n          >\n            delete\n          </button>\n        </TodoRow>\n      ))}\n    </TodoContainer>\n  );\n};\n\nexport default TodoList;\n","// import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUser, clearUser } from '../../store/index';\n\nconst UserWrap = styled.div`\nflex-basis: 30%;\ntext-align: center;\nposition:relative;\nbackground-color: white;\npadding: 10px;\nmargin:10px;\nborder-radius: 10px;\n`;\n\nconst UserContainer = styled.div`\nposition: sticky;\ntop: 20px; \ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ngap: 10px;\n`;\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUser);\n\n  return (\n    <UserWrap>\n      {user ? (\n        <UserContainer>\n          <div>{`Selected user: ${user.id}`}</div>\n          <p className=\"subtitle is-3\">{user.name}</p>\n          <p>{user.email}</p>\n          <p>{user.phone}</p>\n          <button\n            type=\"button\"\n            className=\"button is-dark\"\n            onClick={() => dispatch(clearUser())}\n          >\n            Clear\n          </button>\n        </UserContainer>\n      ) : (\n        <p>No user selected</p>\n      )}\n    </UserWrap>\n  );\n};\n\nexport default User;\n","// import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport './App.scss';\nimport { fetchTodos } from './asyncActions/todos';\nimport TodoList from './components/TodoList/TodoList';\nimport User from './components/User/User';\n\nimport 'bulma/css/bulma.min.css';\n\nconst AppWrapper = styled.div`\nwidth: 100%;\nmin-height: 100vh;\npadding: 2rem;\nbackground: #ff9063;\n`;\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, []);\n\n  return (\n    <AppWrapper>\n      <div className=\"App\">\n        <h1 className=\"title\">Redux list of todos</h1>\n        <div className=\"app__content\">\n          <TodoList />\n          <User />\n        </div>\n      </div>\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}